openapi: 3.0.3
info:
  title: ToDo List API
  description: |
    A clean, RESTful API for managing tasks with proper separation of concerns.
    Designed to be implemented in any programming language or framework.
  version: 1.0.0
  contact:
    email: api-support@todoapp.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.todoapp.com/v1
    description: Production server
  - url: https://sandbox.api.todoapp.com/v1
    description: Sandbox environment

tags:
  - name: Authentication
    description: User registration and login
  - name: Tasks
    description: Task management operations
  - name: Categories
    description: Task categorization

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: VALIDATION_ERROR
            message:
              type: string
              example: Invalid request data
            details:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
              example:
                title: ["Title is required"]
                dueDate: ["Must be future date"]
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          example: /tasks

    Task:
      type: object
      required:
        - id
        - title
        - status
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        title:
          type: string
          minLength: 1
          maxLength: 100
          example: Complete API documentation
        description:
          type: string
          nullable: true
          maxLength: 500
          example: Write OpenAPI spec for Todo API
        status:
          type: string
          enum: [pending, completed]
          default: pending
        priority:
          type: string
          enum: [low, medium, high]
          default: medium
        dueDate:
          type: string
          format: date-time
          nullable: true
          example: 2024-12-31T23:59:59Z
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        categoryId:
          type: string
          format: uuid
          nullable: true

    Category:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 50
        color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
          example: "#ff5722"
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    PaginatedTasks:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        pagination:
          type: object
          properties:
            total:
              type: integer
              minimum: 0
            limit:
              type: integer
              minimum: 1
              maximum: 100
            offset:
              type: integer
              minimum: 0

    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
          description: Seconds until token expiration

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    taskIdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Task identifier

    statusParam:
      name: status
      in: query
      schema:
        type: string
        enum: [pending, completed]
      description: Filter by task status

    priorityParam:
      name: priority
      in: query
      schema:
        type: string
        enum: [low, medium, high]
      description: Filter by priority level

    limitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Number of items per page

    offsetParam:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Pagination offset

  responses:
    UnauthorizedError:
      description: Missing or invalid authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

paths:
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                  maxLength: 100
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
            example:
              email: alice@example.com
              password: password123
              username: alice
      responses:
        '201':
          description: User created successfully
          headers:
            Location:
              description: URL to the created user resource
              schema:
                type: string
              
            example: /auth/users/550e8400-e29b-41d4-a716-446655440000
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  email:
                    type: string
                  username:
                    type: string
              example:
                id: 550e8400-e29b-41d4-a716-446655440000
                email: alice@example.com
                username: alice
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Authenticate user
      description: Accepts form-encoded credentials. The "username" field should contain the user's email.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  format: email
                password:
                  type: string
            example:
              username: user@example.com
              password: password123
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
              example:
                accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                expiresIn: 1800
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks:
    get:
      tags: [Tasks]
      summary: List tasks with pagination
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/statusParam'
        - $ref: '#/components/parameters/priorityParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/offsetParam'
      responses:
        '200':
          description: Paginated list of tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTasks'
              example:
                tasks:
                  - id: 550e8400-e29b-41d4-a716-446655440000
                    title: Complete API documentation
                    description: Write OpenAPI spec for Todo API
                    status: pending
                    priority: medium
                    dueDate: 2025-12-31T23:59:59Z
                    createdAt: 2025-01-01T12:00:00Z
                    updatedAt: 2025-01-02T08:00:00Z
                    categoryId: d14a028c-2a3a-4a4e-b7b2-6f83f2b7a9d7
                  - id: 7b9f3bfa-3b45-4d7a-9b42-6f5cba4e88f1
                    title: Buy groceries
                    description: Milk, eggs, bread
                    status: completed
                    priority: low
                    dueDate: null
                    createdAt: 2025-01-03T10:00:00Z
                    updatedAt: 2025-01-03T12:00:00Z
                    categoryId: null
                pagination:
                  total: 2
                  limit: 20
                  offset: 0
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags: [Tasks]
      summary: Create a new task
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title]
              properties:
                title:
                  type: string
                description:
                  type: string
                dueDate:
                  type: string
                  format: date-time
                priority:
                  type: string
                  enum: [low, medium, high]
                categoryId:
                  type: string
                  format: uuid
            example:
              title: Complete API documentation
              description: Write OpenAPI spec for Todo API
              dueDate: 2025-12-31T23:59:59Z
              priority: medium
              categoryId: 1e0e22b4-3ca0-4d45-9f1b-bb6a2a6f9a8d
      responses:
        '201':
          description: Task created
          headers:
            Location:
              schema:
                type: string
              description: URL to the created task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
              example:
                id: 550e8400-e29b-41d4-a716-446655440000
                title: Complete API documentation
                description: Write OpenAPI spec for Todo API
                status: pending
                priority: medium
                dueDate: 2025-12-31T23:59:59Z
                createdAt: 2025-01-01T12:00:00Z
                updatedAt: null
                categoryId: 1e0e22b4-3ca0-4d45-9f1b-bb6a2a6f9a8d
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/{id}:
    get:
      tags: [Tasks]
      summary: Get task details
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/taskIdParam'
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
              example:
                id: 550e8400-e29b-41d4-a716-446655440000
                title: Complete API documentation
                description: Write OpenAPI spec for Todo API
                status: pending
                priority: medium
                dueDate: 2025-12-31T23:59:59Z
                createdAt: 2025-01-01T12:00:00Z
                updatedAt: 2025-01-02T08:00:00Z
                categoryId: d14a028c-2a3a-4a4e-b7b2-6f83f2b7a9d7
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags: [Tasks]
      summary: Replace entire task
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/taskIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
            example:
              id: 550e8400-e29b-41d4-a716-446655440000
              title: Complete API documentation (updated)
              description: Update the spec and examples
              status: pending
              priority: high
              dueDate: 2026-01-31T23:59:59Z
              createdAt: 2025-01-01T12:00:00Z
              updatedAt: 2025-01-02T08:00:00Z
              categoryId: d14a028c-2a3a-4a4e-b7b2-6f83f2b7a9d7
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
              example:
                id: 550e8400-e29b-41d4-a716-446655440000
                title: Complete API documentation (updated)
                description: Update the spec and examples
                status: pending
                priority: high
                dueDate: 2026-01-31T23:59:59Z
                createdAt: 2025-01-01T12:00:00Z
                updatedAt: 2025-01-10T10:00:00Z
                categoryId: d14a028c-2a3a-4a4e-b7b2-6f83f2b7a9d7
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [Tasks]
      summary: Delete a task
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/taskIdParam'
      responses:
        '204':
          description: Task deleted
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/{id}/complete:
    patch:
      tags: [Tasks]
      summary: Mark task as completed
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/taskIdParam'
      responses:
        '200':
          description: Task marked as completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
              example:
                id: 550e8400-e29b-41d4-a716-446655440000
                title: Complete API documentation
                description: Write OpenAPI spec for Todo API
                status: completed
                priority: medium
                dueDate: 2025-12-31T23:59:59Z
                createdAt: 2025-01-01T12:00:00Z
                updatedAt: 2025-01-02T08:00:00Z
                categoryId: d14a028c-2a3a-4a4e-b7b2-6f83f2b7a9d7
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories:
    get:
      tags: [Categories]
      summary: List categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
              example:
                - id: 11111111-1111-1111-1111-111111111111
                  name: Work
                  color: "#ff0000"
                  createdAt: 2025-01-01T12:00:00Z
                  updatedAt: null
                - id: 22222222-2222-2222-2222-222222222222
                  name: Personal
                  color: "#00ff00"
                  createdAt: 2025-01-02T12:00:00Z
                  updatedAt: null

    post:
      tags: [Categories]
      summary: Create a category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                color:
                  type: string
                  pattern: '^#[0-9a-fA-F]{6}$'
            example:
              name: Work
              color: "#ff0000"
      responses:
        '200':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
              example:
                id: 11111111-1111-1111-1111-111111111111
                name: Work
                color: "#ff0000"
                createdAt: 2025-01-01T12:00:00Z
                updatedAt: null
